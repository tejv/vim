
   " Set Visual Column marker
    set colorcolumn=80 
    
    " Highlight column marker and set its color to grey
    highlight colorcolumn ctermbg=grey guibg=grey  
    
    " Set font
    set guifont=Andale_Mono:h13,Menlo:h13,Consolas:h13,Courier_New:h13
    
    " Set nospell
    set nospell
    
    "Set tags
    "Find tags all the way to root. Will be slow if lot of files. Better option is to set direct path
    " in vim :set tags=/path/to/tags
    " use :set tags   to see current path
    set tags=./tags;/
   
    "Automatic Indent on save
    "au BufWrite * :Autoformat
	
    " toggle paste
    augroup auto_comment
    au!
    au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    augroup END
    
    " Provide space in comment /* x */
    let NERDSpaceDelims=1   
    
    " Set relative numbering  when in normal mode and absolute numbering
    " in insert mode.
    autocmd InsertEnter * :set norelativenumber
    autocmd InsertLeave * :set relativenumber

    " Change leader for easy motion to <leader> from <leader><leader>
    let g:EasyMotion_leader_key='<leader>'
    " Exclude following windows from easy motion
    let g:numbers_exclude = ['gundo', 'minibufexpl']"
    
    " Function header 
    function Fhead()
    let s:line=line(".")
    call setline(s:line,"/**")
    call append(s:line," * @brief ")
    call append(s:line+1," * @param ")
    call append(s:line+2," * @return ")
    call append(s:line+3," */")
    unlet s:line
    endfunction
    
    " Enum/Struct/typedef header 
    function Enumhead()
    let s:line=line(".")
    call setline(s:line,"/**")
    call append(s:line," * @typedef ")
    call append(s:line+1," * @brief ")
    call append(s:line+2," */")
    unlet s:line
    endfunction

    " Comment header
    function Commenthead()
    let s:line=line(".")
    call setline(s:line,"/**")
    call append(s:line," * @brief ")
    call append(s:line+1," */")
    unlet s:line
    endfunction

    " Map delete to F1
    function DeleteFile()
        call delete(expand('%')) | bdelete!
    endfunction
    
    function! s:swap_lines(n1, n2)
    let line1 = getline(a:n1)
    let line2 = getline(a:n2)
    call setline(a:n1, line2)
    call setline(a:n2, line1)
endfunction

function! s:swap_up()
    let n = line('.')
    if n == 1
        return
    endif

    call s:swap_lines(n, n - 1)
    exec n - 1
endfunction

function! s:swap_down()
    let n = line('.')
    if n == line('$')
        return
    endif

    call s:swap_lines(n, n + 1)
    exec n + 1
endfunction

" Normal mode   
    :nmap <F1> <Esc>mz:execute DeleteFile()<CR>`zjA  
    
    "cscope
    nmap <F5> :!find . -iname '*.c' -o -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' > cscope.files ;
  	\:!cscope -b -i cscope.files -f cscope.out<CR>
  	\:cs reset<CR>:cs add cscope.out<CR>
	
    " Pressing F6 will put a function header template
    :nmap <F6> <Esc>mz:execute Fhead()<CR>`zjA    
    
    " Pressing F7 will put a enum  header template
    :nmap <F7> <Esc>mz:execute Enumhead()<CR>`zjA   
    
    " Pressing F8 will put a Comment header template
    :nmap <F8> <Esc>mz:execute Commenthead()<CR>`zjA
	
    " UPPERCASE and lowercase conversion
    nnoremap g^ gUiW
    nnoremap gv guiW
    
    " Go to first and last char of line using H and L
    nnoremap H ^
    nnoremap L g_
    
    " Use tab instead of % for moving between brackets
    nnoremap <tab> %

    " Space to toggle folds
    nnoremap <Space> za

    " Setting paste to take care of indenting when pressing p
    :nnoremap p p=`]
    
    " This will interfere with ctrlp plugin actually may not it is in normal
    " mode but still disabling it
    :nnoremap <leader>p p
    
    " Using leader + keys to do copy word (yiw) and replace word(viwp)
    nmap <leader>c yiw
    nmap <leader>v viwp
    
    nmap <leader>z o<Esc>j
    nmap <leader>x O<Esc>j  
    nmap <silent>,a ggVG
    
    " Assigning special feature to up down arrow  key
    "no <Up> ddkP
    "no <Down> ddp
    "nnoremap <Down> :m .+1<CR>==
    "nnoremap <Up> :m .-2<CR>==
    noremap <silent> <Up> :call <SID>swap_up()<CR>
    noremap <silent> <Down> :call <SID>swap_down()<CR>
    noremap <Left> yyO<Esc>P
    noremap <Right> "ap
    
"Visual mode   
    vnoremap <tab> %
    vnoremap <Space> za
    vnoremap H ^
    vnoremap L g_
    
    " Using leader + keys to do copy into a register (yiw)
    vnoremap <leader>c "ay
    vnoremap <leader>v "ap
    vnoremap <leader>x "ad
    
    vnoremap <Down> :m '>+1<CR>gv=gv
    vnoremap <Up> :m '<-2<CR>gv=gv
    vnoremap <Left> <NOP>
    vnoremap <Right> "ap
    
"Insert mode
    " Escape from brackets , pressing ctrl + j will move out of bracket
    " in insert mode
    inoremap <C-j> <Esc>/[)}"'\]>]<CR>:nohl<CR>a
    inoremap <leader><leader> <Esc>/[)}"'\]>]<CR>:nohl<CR>a
    inoremap ;; <Esc>$a;
    inoremap :: <Esc>$a:<CR>
    inoremap .. <Esc>$a<CR>
    "inoremap ^^ <NOP>
    "inoremap ~~ <NOP>
    "inoremap `` <NOP>
    
    "inoremap <silent><Up> <Esc>$a{<CR>}<Esc>O<tab>
    "inoremap <silent><Down> <Esc>A<CR>{<CR>}<Esc>O
    inoremap <silent><Up> <NOP>
    inoremap <silent><Down> <NOP>
    inoremap <silent><Left> <Esc>yyPj
    inoremap <silent><Right> <NOP>

"cscope settings
if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out  
    " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose  


    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.  
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>	

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>	


    " Hitting CTRL-space *twice* before the search type does a vertical 
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout 
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout 
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

endif

